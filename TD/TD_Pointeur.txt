Exercice 1:

p1,p2 pointeur sur réel
q1,q2 pointeur sur complexe

Type complexe record 
    im réel
    réel réel
end record



1) P1 recoit null
2) P2 recoit 2.2
3) Exception ptr null (P1.ALL<-1.2)
4) P2.ALL<-2.2
5) P1<-P2
6) Ecrire(P1) => Affiche 2.2
7) P2.all<-3.3
7bis)   Ecrire(P1.all) -> 3.3

8) q1<- New complexe
9) q1.all.réel <- p1.all
10) q1.all.im <- p2.all
11) Ecrire(q1)=> Erreur, on ne peut pas afficher un pointeur
12) q2<-q1
13) Ecrire(q2.all.réel) => 3.3



Exercice 2:


TYPE T_liste_linéraire est POINTEUR sur Cellule

TYPE T_Cellule est ENREGISTREMENT
    Element : Entier
    Suivant : T_liste_linéraire
end record

1)

procedure Init(F_L: out T_liste_linéraire) est 
begin
F_L <- null
end

2)

procedure AjouterVal(F_L : in out T_liste_linéraire,Val : in Entier) est
P : T_liste_linéraire
begin
P <- New T_liste_linéraire
P^Element <- Val
P^Suivant<-F_L
F_L<-P
end

OU

F_L <- New T_Cellule(Fe,F_L)

3)

afficherListeIter(F_L : in T_liste_linéraire) est
begin
    Copie_Liste <- F_L
    TQ Copie_Liste /= Null faire
        ecrire(Copie_Liste^Element)
        Copie_Liste <- Copie_Liste^Suivant
    Fin TQ
end

afficherListeRecur(F_L:in T_liste_linéraire) est
begin
    Copie_FL<-F_L
    Si Copie_FL^Suivant /= Null alors
        ecrire(Copie_FL^Element)
        afficherListeRecur(Copie_FL^Suivant)
    fin Si
end


4)

function estPrésentIte(F_L:in T_liste_linéraire, Val: in Entier) retourne T_Liste_linéaire est
begin
    Copie_FL<-F_L
        TQ Copie_FL /= Null Et alors Copie_FL^Element/= Val faire
    fin TQ
    retourne (Non(L=null))
end

function estPrésentRec(F_L:in T_liste_linéraire, Val: in Entier) retourne T_Liste_linéaire est
begin
    Copie_FL<-F_L
    if(Copie_FL = Null) alors
        return null;
    else
        retourne (F_L^Element = Val OU estPrésentRec(F_L,Val))
end


6)

function renvoyerPremElem(F_L:in T_liste_linéraire) retourne Entier est
begin
    Copie_FL<-F_L
    retourne Copie_FL^Element
end

7)

procedure insererAprès(Val : in Entier; f : in Entier, F_L : in out T_Liste_linéaire)
    if(F_L=Null) then
        Swap_Cellule<-new T_Cellule(f,null);
        F_L<-Swap_Cellule;
    Copie_FL<-F_L
    TQ Copie_FL^Element /= f ET Copie_FL^Suivant/= Null faire
        Copie_FL<-Copie_FL^Suivant
    Fin TQ

    Swap_Cellule<- New T_Cellule(f,Copie_FL^Suivant);
    Copie_FL^Suivant<-Swap_Cellule
fin

8)

procedure supprimer(Val : in Entier;F_L:in out ) est
    Copie_FL<-F_L
    Succ<-Copie_FL^Suivant
    Si Copie_FL^Element=Val alors
        Copie_FL<-Copie_FL^Suivant
    sinon
        TQ  Succ^Element /= Val faire
            Succ<-Succ^Suivant
            Copie_FL<-Copie_FL^Suivant
        fin TQ

        Copie_FL^Suivant<-Succ^Suivant;
    fin Si
fin


9)

function valeurALindice(index: in entier;F_L:in T_liste_linéraire) return Entier est
begin
    Copie_FL<-F_L
    pour i allant de 1..index-1 faire
        Copie_FL<-Copie_FL^Suivant
    fin pour
    retourn Copie_FL^Element
end 
